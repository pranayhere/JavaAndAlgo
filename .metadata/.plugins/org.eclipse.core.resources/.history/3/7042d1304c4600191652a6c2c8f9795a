package com.pranay.GeeksForGeeks;

import java.util.ArrayList;
import java.util.List;

public class Knapsack {
	public static void main(String[] args) {
		List<Integer> bundleQuantities = new ArrayList<Integer>();
		bundleQuantities.add(20);
		bundleQuantities.add(19);
//		bundleQuantities.add(3);
//		bundleQuantities.add(4);
		
		List<Integer> bundleCosts = new ArrayList<Integer>();
		bundleCosts.add(24);
		bundleCosts.add(20);
//		bundleCosts.add(3);
//		bundleCosts.add(4);
		
		
		int n = 50;
		
		int ans = budgetShopping(n, bundleQuantities, bundleCosts);
	}
	
	static int max(int a, int b) { return (a > b)? a : b; } 
	
	public static int budgetShopping(int n, List<Integer> bundleQuantities, List<Integer> bundleCosts) {
		Integer[] wt = new Integer[bundleQuantities.size()];
		wt = bundleQuantities.toArray(wt);
		
		Integer[] val = new Integer[bundleCosts.size()];
		val = bundleCosts.toArray(val);
		
		int i, w, W = n;
		
	     int K[][] = new int[n+1][W+1]; 
	       
	     // Build table K[][] in bottom up manner 
	     for (i = 0; i <= n; i++) 
	     { 
	         for (w = 0; w <= W; w++) 
	         { 
	             if (i==0 || w==0) 
	                  K[i][w] = 0; 
	             else if (wt[i-1] <= w) 
	                   K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]); 
	             else
	                   K[i][w] = K[i-1][w]; 
	         } 
	      } 
	       
	      return K[n][W]; 
	}
}
